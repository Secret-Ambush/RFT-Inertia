<Window  
    x:Class="WpfApp1.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:WpfApp1"
        xmlns:local="clr-namespace:WpfApp1"
        xmlns:converter="clr-namespace:System.Windows"
        d:DataContext="{d:DesignInstance Type=vm:WindowViewModel}"
        MouseDown="Window_MouseDown"
        WindowStartupLocation="CenterScreen"
        mc:Ignorable="d"
        WindowStyle="SingleBorderWindow"
        MinWidth="600"
        MinHeight="500"
        ResizeMode="CanResizeWithGrip"
        x:Name="AppWindow" 
        Icon="Resources/logo.png"
        Title="Inertia Calculator" Height="700" Width="800">

    <WindowChrome.WindowChrome>
        <WindowChrome GlassFrameThickness="0.5" CornerRadius="4" CaptionHeight="0" UseAeroCaptionButtons="False" ResizeBorderThickness="7"/>
    </WindowChrome.WindowChrome>

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="./Styles/Fonts.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <Style TargetType="TextBox">
                <Setter Property="ToolTipService.ShowDuration" Value="5000"/>
                <Setter Property="ToolTipService.InitialShowDelay" Value="0"/>
                <Setter Property="ToolTipService.HasDropShadow" Value="True"/>
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="true">
                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                        <Setter Property="Foreground" Value="Red"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="DataGridCell">
                <Setter Property="ToolTipService.ShowDuration" Value="5000"/>
                <Setter Property="ToolTipService.InitialShowDelay" Value="0"/>
                <Setter Property="ToolTipService.HasDropShadow" Value="True"/>
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="true">
                        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                        <Setter Property="Foreground" Value="Red"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <converter:BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter"/>
            <converter:InverseBooleanToVisibilityConverter x:Key="inversebooleanToVisibilityConverter"/>
        </ResourceDictionary>
    </Window.Resources>

    <Border BorderBrush="#172D13" BorderThickness="2" Background="#F7F7F7">
        <Grid>
            <Grid.Resources>
                <ControlTemplate x:Key="windowControls" TargetType="Button">
                    <Grid>
                        <ContentPresenter x:Name="buttons" Opacity="0.7" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="buttons" Property="Opacity" Value="1"/>
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate> 
            </Grid.Resources>


            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="45" />
                <RowDefinition Height="46*"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <!--title bar-->
            <Border BorderThickness="0">
                <Border.Background>
                    <SolidColorBrush Color="#8DB48E"/>
                </Border.Background>

                <!--Window Icon and Title-->
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <!-- Icon -->
                    <Border Grid.Column="0" Margin ="5 5 0 5">
                        <Image Source="Resources/Jacobs.png" Height="30" VerticalAlignment="Center" HorizontalAlignment="Left" />
                    </Border>

                    <!--Title-->
                    <TextBlock FontFamily="{DynamicResource ParadiseLove}" Grid.Column="1" Text="Inertia Calculator" Height="Auto" Width="Auto" FontSize="25"
                    FontWeight="Bold" VerticalAlignment="Center" HorizontalAlignment="Center" />

                    <!-- Close, Min, Max -->
                    <Grid Grid.Column="2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="40"/>
                            <ColumnDefinition Width="40"/>
                            <ColumnDefinition Width="40"/>
                        </Grid.ColumnDefinitions>


                        <Button Margin ="0 0 0 5" Grid.Column="1" Command="{Binding MinimizeCommand}" Template="{StaticResource windowControls}">
                            <Image Source="Images/min.jpg" Stretch="Fill"/>
                        </Button>
                        <Button Margin ="0 0 0 5" Grid.Column="2" Command="{Binding MaximizeCommand}" Template="{StaticResource windowControls}">
                            <Image Source="{Binding Image}" Stretch="Fill"/>
                        </Button>
                        <Button Margin ="0 0 2 5" Grid.Column="3" Command="{Binding CloseCommand}" Template="{StaticResource windowControls}">
                            <Image Source="Images/close.png" Stretch="Fill"/>
                        </Button>
                    </Grid>
                </Grid>
            </Border>

            <!--Main Content -->
            <Grid Grid.Row="1">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="10"/>
                    <ColumnDefinition Width="2*"/>
                    <ColumnDefinition Width="10"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="10"/>
                </Grid.ColumnDefinitions>

                <!--User Inputs-->
                <GroupBox Grid.Column="1" Header="Properties" FontWeight="DemiBold" BorderBrush="#D76F30">
                    <Grid x:Name="UserInputs">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="20"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="10"/>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="40"/>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="30"/>
                        </Grid.RowDefinitions>

                        <!-- Labels in Column 0 of Inner Grid -->
                        <Label FontFamily="{StaticResource ProductSans}" Grid.Row="1" Grid.Column="0" Content="Section Type" FontWeight="Bold"/>

                        <!--Labels for rectangular sections-->
                        <Label FontFamily="{StaticResource ProductSans}" Visibility="{Binding Option, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, Converter={StaticResource booleanToVisibilityConverter}}" 
                           Grid.Row="2" Grid.Column="0" Content="Width (mm)" FontWeight="Bold"/>
                        <Label FontFamily="{StaticResource ProductSans}" Visibility="{Binding Option, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, Converter={StaticResource booleanToVisibilityConverter}}" 
                           Grid.Row="3" Grid.Column="0" Content="Height (mm)" FontWeight="Bold"/>
                        <Label FontFamily="{StaticResource ProductSans}" Visibility="{Binding Option, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, Converter={StaticResource booleanToVisibilityConverter}}" 
                            Grid.Row="5" Grid.Column="0" Content="Side Cover (mm)" FontWeight="Bold"/>

                        <!--Labels for circular sections-->

                        <Label FontFamily="{StaticResource ArchDaughter}" Visibility="{Binding Option, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, Converter={StaticResource inversebooleanToVisibilityConverter}}" 
                            Grid.Row="2" Grid.Column="0" Content="Radius (mm)" FontWeight="Bold"/>
                        <Label FontFamily="{StaticResource ArchDaughter}" Visibility="{Binding Option, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, Converter={StaticResource inversebooleanToVisibilityConverter}}" 
                            Grid.Row="3" Grid.Column="0" Content="Diameter (mm)" FontWeight="Bold"/>

                        <!-- Alternate Style

                    <Label FontFamily="{StaticResource ProductSans}" Visibility="{Binding Option, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, Converter={StaticResource inversebooleanToVisibilityConverter}}" 
                                Grid.Row="2" Grid.RowSpan="2" Grid.Column="0" Content="Radius" FontWeight="Bold" Margin="0,15,0,15"/>
                     -->

                        <Label FontFamily="{StaticResource ProductSans}" Grid.Row="4" Grid.Column="0" Content="Cover (mm)" FontWeight="Bold"/>

                        <Grid Grid.Row="8" Grid.Column="0" Grid.RowSpan="5">

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="30"/>
                            </Grid.RowDefinitions>


                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" FontFamily="{StaticResource ProductSans}" Grid.Row="0" Grid.Column="0" FontWeight="Bold">
                                Rebar Area (mm<Run FontSize="7pt" BaselineAlignment="TextTop">2</Run>)
                            </TextBlock>
                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="1" Grid.Column="0" FontWeight="Bold"> Rebar
                            I<Run FontSize="7pt" BaselineAlignment="TextBottom">x</Run>
                            (mm<Run FontSize="7pt" BaselineAlignment="TextTop">4</Run>)
                            </TextBlock>
                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="2" FontFamily="{StaticResource ParadiseLove}" Grid.Column="0" FontWeight="Bold"> Rebar
                            I<Run FontSize="7pt" BaselineAlignment="TextBottom">y</Run>
                            (mm<Run FontSize="7pt" BaselineAlignment="TextTop">4</Run>)
                            </TextBlock>
                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="3" Grid.Column="0" FontWeight="Bold"> Rebar
                            r<Run FontSize="7pt" BaselineAlignment="TextBottom">x</Run> (mm)
                            </TextBlock>
                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="4" Grid.Column="0" FontWeight="Bold"> Rebar
                            r<Run FontSize="7pt" BaselineAlignment="TextBottom">y</Run> (mm)
                            </TextBlock>


                            <TextBox x:Name="RA" IsReadOnly="True" Text ="{Binding AreaOfRebars}" FontFamily="{StaticResource ProductSans}" Grid.Row="0" Grid.Column="1" 
                                Background="#EFEFEF" Padding="5" Margin="0 2 0 2"/>
                            <TextBox x:Name="RIY" IsReadOnly="True" Text="{Binding RebarIx}" Grid.Row="1" Grid.Column="1" Padding="5" Background="#EFEFEF" Margin="0 0 0 2"/>
                            <TextBox x:Name="RIX" IsReadOnly="True" Text="{Binding RebarIy}" Grid.Row="2" Grid.Column="1" Padding="5" Background="#EFEFEF" Margin="0 0 0 2" />
                            <TextBox x:Name="RRX" IsReadOnly="True" Text="{Binding RebarRadiusX}" Grid.Row="3" Grid.Column="1" Padding="5" Background="#EFEFEF" Margin="0 0 0 2"/>
                            <TextBox x:Name="RRY" IsReadOnly="True" Text="{Binding RebarRadiusY}" Grid.Row="4" Grid.Column="1" Padding="5" Background="#EFEFEF" Margin="0 0 0 2"/>

                        </Grid>


                        <!--Table in Column 0 of Inner Grid-->
                        <DataGrid Grid.Row="6" Grid.ColumnSpan="3" Margin="10,10,10,10" 
                              CanUserAddRows="True" CanUserDeleteRows="True" 
                              VerticalGridLinesBrush="AliceBlue"
                              GridLinesVisibility="Vertical"
                              IsReadOnly="False" AutoGenerateColumns="False"
                              ItemsSource="{Binding Entries}" HeadersVisibility="Column"
                              EnableRowVirtualization="False"
                              FontStyle="Normal" Foreground="Black"
                              SelectionMode="Single"
                              Background="White">

                            <DataGrid.Resources>
                                <Style x:Key="ColumnHeaderStyle" TargetType="DataGridColumnHeader">
                                    <Setter Property="Background" Value="#A7BC5B"/>
                                </Style>
                            </DataGrid.Resources>
                            <DataGrid.ColumnHeaderStyle>
                                <StaticResource ResourceKey="ColumnHeaderStyle" />
                            </DataGrid.ColumnHeaderStyle>
                            
                            <!--Row Number-->
                            <DataGrid.Columns>
                                <DataGridTextColumn IsReadOnly="True" Binding="{Binding Count, ValidatesOnDataErrors=True}" Width="*">
                                    <DataGridTextColumn.Header>
                                        <StackPanel HorizontalAlignment="Center" Orientation="Vertical">
                                            <TextBlock Padding="5" Text="Row" HorizontalAlignment="Center"/>
                                        </StackPanel>
                                    </DataGridTextColumn.Header>
                                    <DataGridTextColumn.CellStyle>
                                        <Style TargetType="DataGridCell">
                                            <Setter Property="Background" Value="#EFEFEF" />
                                            <Setter Property="Padding" Value="4,2,2,2" />
                                        </Style>
                                    </DataGridTextColumn.CellStyle>
                                </DataGridTextColumn>

                                <!--Rebar Diameter-->
                                <DataGridTextColumn Binding="{Binding Dia, ValidatesOnDataErrors=True}" Width="100">
                                    <DataGridTextColumn.Header>
                                        <StackPanel HorizontalAlignment="Center" Orientation="Vertical">
                                            <TextBlock Text="Rebar Diameter" HorizontalAlignment="Center"/>
                                            <TextBlock Text="(mm&#x00B2;)" HorizontalAlignment="Center"/>
                                        </StackPanel>
                                    </DataGridTextColumn.Header>
                                </DataGridTextColumn>
                                   

                                <!--Number of Rebars-->
                                <DataGridTextColumn Binding="{Binding Num, ValidatesOnDataErrors=True}" Width="100">
                                    <DataGridTextColumn.Header>
                                        <StackPanel HorizontalAlignment="Center" Orientation="Vertical">
                                            <TextBlock Text="Number of" HorizontalAlignment="Center"/>
                                            <TextBlock Text="Rebars" HorizontalAlignment="Center"/>
                                        </StackPanel>
                                    </DataGridTextColumn.Header>
                                </DataGridTextColumn>

                                <!--Delta Y or Spacing or chuck-->
                                <DataGridTextColumn Binding="{Binding DeltaY, ValidatesOnDataErrors=True}" Width="*">
                                    <DataGridTextColumn.Header>
                                        <StackPanel HorizontalAlignment="Center" Orientation="Vertical">
                                            <TextBlock Text="Delta Y" HorizontalAlignment="Center"/>
                                        </StackPanel>
                                    </DataGridTextColumn.Header>
                                </DataGridTextColumn>

                                <!--Delete-->
                                <DataGridTemplateColumn Header="Delete" Width="*">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <Button Content="Delete" Command="Delete"/>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                            </DataGrid.Columns>
                        </DataGrid>

                        <Button Content="Calculate" IsEnabled="{Binding Flag}" Command ="{Binding Calculate}" 
                                Grid.Row="7" Grid.Column="0" Margin ="30,10,30,10" 
                                Background="#849531" Foreground="AntiqueWhite" 
                                />
                        <Button Content="Clear All" Command ="{Binding ClearAll}" Grid.Row="7" Grid.Column="2" Margin ="30,10,30,10" Background="#849531" Foreground="AntiqueWhite"/>

                        <!--Controls in Column 2 -->
                        <Border Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" CornerRadius="2">
                            <ComboBox x:Name="section" Margin="0 2 5 2"  Padding="2 2 0 0"  
                              Loaded="section_Loaded"
                              SelectedItem="{Binding MySelectedItem}" >
                                <ComboBoxItem Tag="CC">Circular Column</ComboBoxItem>
                                <ComboBoxItem Tag="RC">Rectangular Column</ComboBoxItem>
                                <ComboBoxItem Tag="RB">Rectangular Beam</ComboBoxItem>
                            </ComboBox>
                        </Border>


                        <!--Input fields for rectangular sections-->
                        <Border Visibility="{Binding Option, 
                        Converter={StaticResource booleanToVisibilityConverter}}" Margin="0 2 5 2"  
                            Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" BorderThickness="0">
                            <TextBox x:Name="Breadth" Text="{Binding Breadth, ValidatesOnDataErrors=True}" Padding="2 2 0 0"/>
                        </Border>
                        <Border Visibility="{Binding Option, 
                        Converter={StaticResource booleanToVisibilityConverter}}" Margin="0 2 5 2"  
                            Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="2" BorderThickness="0">
                            <TextBox x:Name="Height" Text="{Binding Height, ValidatesOnDataErrors=True}" Padding="2 2 0 0"/>
                        </Border>

                        <!--Input field for circular column-->
                        <Border Visibility="{Binding Option, 
                        Converter={StaticResource inversebooleanToVisibilityConverter}}" Margin="0 2 5 2"  
                            Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" BorderThickness="0">
                            <TextBox x:Name="Radius" Padding="2 2 0 0" Text="{Binding Radius, ValidatesOnDataErrors=True}" />
                        </Border>
                        <Border Visibility="{Binding Option, 
                        Converter={StaticResource inversebooleanToVisibilityConverter}}" Margin="0 2 5 2"  
                            Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="2" BorderThickness="0">
                            <TextBox x:Name="Dia" Background="#EFEFEF" Padding="2 2 0 0" Text="{Binding Diameter, ValidatesOnDataErrors=True}"/>
                        </Border>

                        <!-- Alternate Style
                    <Border Visibility="{Binding Option, 
                        Converter={StaticResource inversebooleanToVisibilityConverter}}" Margin="0,15,0,15"  
                            Grid.Row="2" Grid.RowSpan="2" Grid.Column="1" Grid.ColumnSpan="2" BorderThickness="0">
                        <TextBox IsReadOnly="True" Padding="2 2 0 0" Margin="0,0,5,0"/>
                    </Border>
                    -->

                        <Border Margin="0 2 5 2"  Grid.Row="4" Grid.Column="1" Grid.ColumnSpan="2" BorderThickness="0">
                            <TextBox Padding="2 2 0 0" Text="{Binding Cover, ValidatesOnDataErrors=True}"/>
                        </Border>

                        <!--Side Cover for rectangular-->
                        <Border Visibility="{Binding Option, 
                         Converter={StaticResource booleanToVisibilityConverter}}" Margin="0 2 5 2"  
                             Grid.Row="5" Grid.Column="1" Grid.ColumnSpan="2" BorderThickness="0">
                            <TextBox x:Name="Side_Cover" Text="{Binding SideCover, ValidatesOnDataErrors=True}" Padding="2 2 0 0"/>
                        </Border>

                        <!-- Labels in Column 2 of Inner Grid -->
                        <Grid Grid.Column="2" Grid.Row="8" Grid.RowSpan="5">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="30"/>
                            </Grid.RowDefinitions>

                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" FontFamily="{StaticResource ProductSans}" Grid.Row="0" Grid.Column="0" 
                                   FontWeight="Bold">
                                Total Area (mm<Run FontSize="7pt" BaselineAlignment="TextTop">2</Run>)
                            </TextBlock>
                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="1" Grid.Column="0" FontWeight="Bold"> Total
                                I<Run FontSize="7pt" BaselineAlignment="TextBottom">x</Run>
                                (mm<Run FontSize="7pt" BaselineAlignment="TextTop">4</Run>)
                            </TextBlock>
                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="2" Grid.Column="0" FontWeight="Bold"> Total
                                I<Run FontSize="7pt" BaselineAlignment="TextBottom">y</Run>
                                (mm<Run FontSize="7pt" BaselineAlignment="TextTop">4</Run>)
                            </TextBlock>
                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="3" Grid.Column="0" FontWeight="Bold"> Total
                                r<Run FontSize="7pt" BaselineAlignment="TextBottom">x</Run> (mm)
                            </TextBlock>
                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="4" Grid.Column="0" FontWeight="Bold"> Total
                            r<Run FontSize="7pt" BaselineAlignment="TextBottom">y</Run> (mm)
                            </TextBlock>

                            <TextBox x:Name="TA" Text="{Binding TotalArea}" IsReadOnly="True" FontFamily="{StaticResource ProductSans}" Grid.Row="0" Grid.Column="1" 
                                   Background="#EFEFEF" Margin="0 2 0 2"/>
                            <TextBox x:Name="TIX" Text="{Binding TotalIx}" IsReadOnly="True" Grid.Row="1" Grid.Column="1" Background="#EFEFEF" Margin="0 0 0 2" />
                            <TextBox x:Name="TIY" Text="{Binding TotalIy}" IsReadOnly="True" Grid.Row="2" Grid.Column="1" Background="#EFEFEF" Margin="0 0 0 2" />
                            <TextBox x:Name="TRX" Text="{Binding TotalRx}" IsReadOnly="True" Grid.Row="3" Grid.Column="1" Background="#EFEFEF" Margin="0 0 0 2" />
                            <TextBox x:Name="TRY" Text="{Binding TotalRy}" IsReadOnly="True" Grid.Row="4" Grid.Column="1" Background="#EFEFEF" Margin="0 0 0 2" />
                        </Grid>
                        
                    </Grid>
                </GroupBox>

                <!--Diagram-->
                <GroupBox Margin="10 0 0 0" Grid.Column="3" Header="Diagram" FontWeight="DemiBold" BorderBrush="#D76F30">
                    <Grid>
                        <Canvas x:Name="Rectangle" Visibility="{Binding Option, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, Converter={StaticResource booleanToVisibilityConverter}}" Width="200" Height="200">
                            <!-- Rectangle representing the section -->
                            <Rectangle Width="191" Height="191" Stroke="Black" StrokeThickness="3" Fill="LightGray" HorizontalAlignment="Center" Canvas.Left="-1" Canvas.Top="-1" VerticalAlignment="Center"/>

                            <!-- Rebars -->
                            <Ellipse Width="10" Height="10" Fill="Black" Canvas.Left="40" Canvas.Top="15" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <Ellipse Width="10" Height="10" Fill="Black" Canvas.Left="95" Canvas.Top="15" RenderTransformOrigin="2.4,0.585"/>
                            <Ellipse Width="10" Height="10" Fill="Black" Canvas.Left="150" Canvas.Top="15" HorizontalAlignment="Center" VerticalAlignment="Center"/>

                            <!-- Coordinate axes -->
                            <Line X1="0" Y1="0" X2="0" Y2="100" Stroke="Green" StrokeThickness="2"/>
                            <Line X1="100" Y1="0" X2="0" Y2="0" Stroke="Red" StrokeThickness="2" HorizontalAlignment="Center" Canvas.Left="-1" VerticalAlignment="Center" Width="101"/>

                            <!-- X axis label -->
                            <TextBlock Text="X" Foreground="Red" Canvas.Left="93" Canvas.Top="-21" RenderTransformOrigin="-13.01,-5.753"/>
                            <!-- Y axis label -->
                            <TextBlock Text="Y" Foreground="Green" Canvas.Left="-18" Canvas.Top="84"/>
                        </Canvas>

                        <Canvas x:Name="Circle" Visibility="{Binding Option, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, Converter={StaticResource inversebooleanToVisibilityConverter}}" Width="200" Height="200">
                            <!-- Circle representing the section -->
                            <Ellipse Width="200" Height="200" Stroke="Black" StrokeThickness="3" Fill="LightGray" HorizontalAlignment="Center" Canvas.Left="-1" Canvas.Top="-1" VerticalAlignment="Center"/>

                            <!-- Rebars -->
                            <Ellipse Width="10" Height="10" Fill="Black" Canvas.Left="40" Canvas.Top="15" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <Ellipse Width="10" Height="10" Fill="Black" Canvas.Left="95" Canvas.Top="0" RenderTransformOrigin="2.4,0.585"/>
                            <Ellipse Width="10" Height="10" Fill="Black" Canvas.Left="150" Canvas.Top="15" HorizontalAlignment="Center" VerticalAlignment="Center"/>

                            <!-- Coordinate axes -->
                            <Line X1="100" Y1="0" X2="100" Y2="100" Stroke="Green" StrokeThickness="2"/>
                            <Line X1="100" Y1="0" X2="200" Y2="0" Stroke="Red" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center"/>

                            <!-- X axis label -->
                            <TextBlock Text="X" Foreground="Red" Canvas.Left="192" Canvas.Top="-21" RenderTransformOrigin="-13.01,-5.753" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                            <!-- Y axis label -->
                            <TextBlock Text="Y" Foreground="Green" Canvas.Left="87" Canvas.Top="83" RenderTransformOrigin="15.496,0.515"/>
                        </Canvas>
                    </Grid>
                </GroupBox>

            </Grid>

        </Grid>
    </Border>

</Window>
